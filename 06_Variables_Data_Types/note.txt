public class JavaBasics {
    public static void main(String[] args) {

    }
}

// boilerplate code

 System.out.print("Hello World!");
 // print function
 // ; statement terminator

// Compile and Run Java Code

javac FileName.java
java ClassName

=> For Example Class Name JavaBasics.java:
javac JavaBasics.java
java JavaBasics


// print -> Same Line
// println -> Next Line
// \n -> Next Line

 // Variables in Java
 //  a = 10;
 //  b = 5;
 // 2 * (a + b) 
 // -> 2 => Literal 
 // -> a , b  => Variable 
 // int a = 10; // 10 assigned to a
 // int b = 5;

 // a ,b , c ,... -> Variable Name or Identifier

 // Memory 
-> 1 Byte = 8 bits
-> 1 bit store either 1 or 0.
-> 1 KB = 1024 Bytes

// a = 10; -> address -> 1001

    // 1. Stack Memory
    // 2. Heap Memory


 // Data Types in Java 
 // -> Java is Typed Language

// Primitive -> exists
1. byte     -> 1 byte [-128 to 127]  => 256
2. short    -> 2 bytes
3. char     -> 2 bytes
4. boolean  -> 1 bytes
5. int      -> 4 bytes
6. long     -> 8 bytes
7. float    -> 4 bytes
8. double   -> 8 bytes

// Non-Primitive 
1. String
2. Array
3. Class
4. Object
5. Interface


// Comments in Java -> ignore compiler

1. Single Line Comments

 // Hi there!

2. Multi Line Comments

/* 
Hi there!
*/


// Input in Java 

1. next 
2. nextLine
3. nextInt
4. nextByte
5. nextFloat
6. nextDouble
7. nextBoolean 
8. nextShort
9. nextLong

 // System.out.println(doubleNumber);
 // boolean bool = sc.nextBoolean();
 // System.out.println(bool); // enter True convert true , enter False convert false


==> Type Conversion : Widening Conversion : Implicit Conversion
Conversion happens when
a. type compatible
b. destination type > source type

byte -> short -> int -> float -> long -> double

==> Type Casting : Narrowing Conversion :  Explicit Conversion

==> Type Promotion in Expressions :
1. Java automatically promotes each byte, short, or char operand to int when evaluating an expression.
2. If one operand is long, float or double the whole expression is promoted to long, float, or double respectively.


// How is Our Code Running?

 JVM + Libraries = JRE (Java Runtime Environment)

 (JVM + Libraries = JRE ) + Development Tools = JDK

 => Source Code (.java) => Compiler => Byte Code (.class) => Java Virtual Machine (JVM) => Native Code  

 => Source Code (.java) convert Byte Code (.class) => Compilation

 => Byte Code (.class) convert Native Code => Execution

 => Java is Portable Language