// Object Oriented Programming 

Classes => group of these entities 
Objects => entities in real world 

class (Pen) => attributes(properties) => color
        + functionss(behaviors) => changeColor()

// Access Modifiers or Access Specifiers

Access Modifier     within class    within package      outside package by subclass only        outside package

Private                 Y                   N                       N                                   N
Default                 Y                   Y                       N                                   N
Protected               Y                   Y                       Y                                   N
Public                  Y                   Y                       Y                                   Y

// Getter and Setter

Get => to return the value 
Set => to modify the value

this : this keyword is used to refer to the current object in a method or constructor.


// Encapsulation

Encapsulation is defined as the wrapping up of data & methods under a single unit.It also implements data hiding.

data (properties ) + methods (function) => Encapsulation


// Constructors

Constructor is a special method which is invoked automatically at the time of object creation.  

=> Constructors have the same name as class or structure.

=> Constructors don't have any return type.(not even void)

=> Constructors are only called once , at object creation time.

=> Memory allocation happens when constructor is called.


// Types of Constructors

1. Non-Parameterized Constructor

2. Parameterized Constructor

3. Copy Constructor


Copy Constructor 
=> obj2 = copy(obj1)


// Shallow Copy and Deep Copy

Shallow Copy => references copy => changes reflect in original object

Deep Copy => actual copy => changes don't reflect in original object


// Destructor
Garbage Collector => to destroy the object


// Inheritance
=> Inheritance is when properties & methods of base class are passed on to a derived class.

=> Base Class => Parent Class => Super Class
=> Derived Class => Child Class => Sub Class

// Types of Inheritance

Single Inheritance
=> Base Class => Derived Class

Multi Level Inheritance
=> Base Class => Derived Class => Derived Class


// Hierarchical Inheritance
=> Base Class => Derived Class1
=> Base Class => Derived Class2

// Hybrid Inheritance
=> Base Class => Derived Class1
=> Base Class => Derived Class2


// Multiple Inheritance
=> Base Class1 => Derived Class
=> Base Class2 => Derived Class
=> not supported in Java , interface is used instead

// Polymorphism => many forms

1. Compile Time Polymorphism => Method Overloading =>static polymorphism

2. Run Time Polymorphism => Method Overriding => dynamic polymorphism

// Method Overloading
=> Multiple functions with same name but different parameters

// Method Overriding
=> Parent and child classes both contain the same function with a different definition.

// Packages in Java
=> Package is a group of similar types of classes , interfaces and sub-packages.


// Abstraction 
=> Hiding all the unnecessary details and showing only the important parts to the user.
=> Abstract Classes 
=> Interfaces 

// Abstract Class 
- cannot create an instance of abstract class
- can have abstract/non-abstract methods
- can have constructors 


// Interfaces
=> Interface is a blueprint of a class 

- Multiple Inheritance 
- total abstraction 

class => extends
interface => implements

- All methods are public, abstract & without implementation
- Used to achieve total abstraction 
- Variables in the interface are final,public and static

// Multiple Inheritance

Herbivores(Interface)    Carnivores(Interface) => Bear

// class Bear implements Herbivores,Carnivores{ }


// Static Keyword 
=> static keyword in java is used to share the same variable or method of a given class.

- Properties 
- Functions 
- Blocks 
- Nested Classes 

// Super Keyword 
=> super keyword is used to refer immediate parent class object.

- to access parent's properties 
- to access parent's functions 
- to access parent's constructor 

// Practice Questions 

// private and protected modifiers are not allowed in front of class.

                private         default         protected       public
Class              No             Yes               No            Yes  
Nested Class       Yes            Yes               Yes           Yes 
Constructor        Yes            Yes               Yes           Yes 
Method             Yes            Yes               Yes           Yes 
Field              Yes            Yes               Yes           Yes


