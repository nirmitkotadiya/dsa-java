
// 2D Arrays

=> Matrix ( Rows & Columns )

// Real Life Examples

Marks 
RGB 

// Representation
rows = 4 , Columns = 3
4*3 Matrix

(0,0) (0,1) (0,2)
(1,0) (1,1) (1,2)
(2,0) (2,1) (2,2)
(3,0) (3,1) (3,2)

// Creation of 2D Arrays 
for(int i=0 to n)
    for(int j=0 to m)


// 2D Arrays in Memory

=> row major 
        0 1 2   3 4 5   6 7 8 
address 101 104 ...

=> column major 

        0 3 6   1 4 7   2 5 8 
address c1      c2      c3


// Spiral Matrix 


1  2  3  4
5  6  7  8
9  10 11 12
13 14 15 16

=> 1 2 3 4 8 12 16 15 14 13 9 5 6 7 11 10 

// Approach 

border => 2 cols , 2 rows

startRow = 0    startRow++
endRow  = n-1   endRow--
startCol =0     startCol++
endCol =m-1     endCol--

startRow = 1 
endRow  = n-2
startCol =1
endCol =m-2


while (startRow <= endRow && startCol <= endCol){
    1. top 
    2. right 
    3. bottom
    4. left
}


// Diagonal Sum 

1  2  3  4
5  6  7  8
9  10 11 12
13 14 15 16

=> Primary Diagonal = 1 + 6 + 11 + 16 = 34 
   Secondary Diagonal = 4 + 7 + 10 + 13 = 34

PD => i == j (row =col)
SD => i + j = n-1

SD => j = n - 1 -i


// Search in Sorted Matrix

Approach 

1. BruteForce  // n^2 

2. Row wise Binary Search  // n logn

3. Staircase Search   // O(n+m)

(0,m-1) 
key < cellValue => LEFT 
key > cellValue => BOTTOM 

(n-1,0) 
key < cellValue => TOP 
key > cellValue => RIGHT 


